terraform {
    required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

# Configure AWS provider
provider "aws" {
  region = "us-east-1"
}

# ------------------------------------------------------
# Local variables
# ------------------------------------------------------
locals {
    num_instances = 1
    instance_shape = "t2.micro"
}
# ------------------------------------------------------
# Basic networking
# ------------------------------------------------------
resource "aws_default_vpc" "default_vpc" {
    tags = {
        name = "Default VPC"
    }
}
variable "generated_key_name" {
  type        = string
  default     = "terraform-key-pair"
  description = "Key-pair generated by Terraform"
}

resource "tls_private_key" "dev_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.dev_key.public_key_openssh

  provisioner "local-exec" {    # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.dev_key.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 400 ./'${var.generated_key_name}'.pem
    EOT
  }
}
resource "random_id" "id" {
    count = local.num_instances
    byte_length = 4
}
data "template_cloudinit_config" "dependencies" {
    base64_encode = true
    part {
        content_type = "text/x-shellscript"
        content = "${file("./scripts/dependencies.sh")}"
    }
}
# Create an EC2 instance
resource "aws_instance" "benchmark_testing" {
  ami           = "ami-0b0dcb5067f052a63"
  instance_type = "t2.micro"
  key_name      = aws_key_pair.generated_key.key_name
  user_data     = "${data.template_cloudinit_config.dependencies.rendered}"
  tags = {
        Name = "benchmarking-client-instance}"
        created_by = "terraform"
    }
}

# Create a security group to allow incoming HTTP traffic
resource "aws_security_group" "instance" {
  name        = "allow_http"
  description = "Allow incoming HTTP traffic"
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

output "instance_ip" {
  description = "The public ip for ssh access"
  value       =  "${aws_instance.benchmark_testing.public_ip}"
}

output "ec2_ssh_command" {
  description = "so you do not have to go into AWS to copy SSH command"
  value = "ssh -i 'terraform-key-pair.pem' ec2-user@${aws_instance.benchmark_testing.public_dns}"
}
